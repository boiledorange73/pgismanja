# SOME DESCRIPTIVE TITLE.
#
# Translators:
# Teramoto Ikuhiro <yellow@affrc.go.jp>, 2022, 2023.
msgid ""
msgstr ""
"Project-Id-Version: PostGIS\n"
"Report-Msgid-Bugs-To: https://bugs.kde.org\n"
"POT-Creation-Date: 2023-07-15 01:28+0000\n"
"PO-Revision-Date: 2023-05-17 03:08+0000\n"
"Last-Translator: Teramoto Ikuhiro <yellow@affrc.go.jp>\n"
"Language-Team: Japanese <https://weblate.osgeo.org/projects/postgis/"
"performance_tipsxml/ja/>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"X-Generator: Weblate 4.16.4\n"

#. Tag: title
#: performance_tips.xml:3
#, no-c-format
msgid "Performance Tips"
msgstr "性能向上に関する技法"

#. Tag: title
#: performance_tips.xml:6
#, no-c-format
msgid "Small tables of large geometries"
msgstr "大きなジオメトリを持つ小さなテーブル"

#. Tag: title
#: performance_tips.xml:9
#, no-c-format
msgid "Problem description"
msgstr "問題の説明"

#. Tag: para
#: performance_tips.xml:11
#, no-c-format
msgid ""
"Current PostgreSQL versions (including 9.6) suffer from a query optimizer "
"weakness regarding TOAST tables. TOAST tables are a kind of \"extension "
"room\" used to store large (in the sense of data size) values that do not "
"fit into normal data pages (like long texts, images or complex geometries "
"with lots of vertices), see <ulink url=\"http://www.postgresql.org/docs/"
"current/static/storage-toast.html\">the PostgreSQL Documentation for TOAST</"
"ulink> for more information)."
msgstr ""
"現版のPostgreSQL (9.6を含む)では、TOASTテーブルに従うクエリオプティマイザの弱"
"さに苦しみます。 TOASTテーブルは、(長いテキスト、イメージ、多数の頂点を持つ複"
"合ジオメトリといった)通常のデータページに適合しない、(データサイズという意味"
"では)巨大な値を納めるための「拡張部屋」の一種です。詳細情報は <ulink "
"url=\"http://www.postgresql.org/docs/current/static/storage-toast.html\">the "
"PostgreSQL Documentation for TOAST</ulink>をご覧ください。"

#. Tag: para
#: performance_tips.xml:19
#, no-c-format
msgid ""
"The problem appears if you happen to have a table with rather large "
"geometries, but not too many rows of them (like a table containing the "
"boundaries of all European countries in high resolution). Then the table "
"itself is small, but it uses lots of TOAST space. In our example case, the "
"table itself had about 80 rows and used only 3 data pages, but the TOAST "
"table used 8225 pages."
msgstr ""
"(高解像度で全てのヨーロッパの国の境界を含むテーブルのような)大きなジオメトリ"
"があるうえ、行がそう多くないテーブルを持つようになると、この問題が出てきま"
"す。テーブル自体は小さいのですが、多くのTOASTスペースを使います。例として、"
"テーブル自体は概ね80行で3データページしか使わなくてもTOASTテーブルで8225ペー"
"ジを使うとします。"

#. Tag: para
#: performance_tips.xml:26
#, no-c-format
msgid ""
"Now issue a query where you use the geometry operator &amp;&amp; to search "
"for a bounding box that matches only very few of those rows. Now the query "
"optimizer sees that the table has only 3 pages and 80 rows. It estimates "
"that a sequential scan on such a small table is much faster than using an "
"index. And so it decides to ignore the GIST index. Usually, this estimation "
"is correct. But in our case, the &amp;&amp; operator has to fetch every "
"geometry from disk to compare the bounding boxes, thus reading all TOAST "
"pages, too."
msgstr ""
"ここで、ジオメトリ演算子の&amp;&amp;を使って、ほとんどマッチしないようなバウ"
"ンダリボックスを検索するクエリを出してみます。クエリオプティマイザにはテーブ"
"ルは3ページ80行しかないように見えます。オプティマイザは、小さなテーブルを順に"
"走査する方がインデックスを使うよりも早いと見積もります。そして、GiSTインデッ"
"クスは無視すると決めます。通常なら、この見積もりは正しいです。しかし、この場"
"合は&amp;&amp;演算子が全てのジオメトリをディスクから呼び出してバウンディング"
"ボックスと比較しなければならなくなり、ゆえに、全てのTOASTページもまた呼び出す"
"必要があります。"

#. Tag: para
#: performance_tips.xml:35
#, no-c-format
msgid ""
"To see whether your suffer from this issue, use the \"EXPLAIN ANALYZE\" "
"postgresql command. For more information and the technical details, you can "
"read the thread on the PostgreSQL performance mailing list: <ulink "
"url=\"http://archives.postgresql.org/pgsql-performance/2005-02/msg00030."
"php\">http://archives.postgresql.org/pgsql-performance/2005-02/msg00030.php</"
"ulink>"
msgstr ""
"この問題に苦しむかどうかを見るには、PostgreSQLの\"EXPLAIN ANALYZE\"コマンドを"
"使います。詳細情報と技術情報については、PostgreSQL性能メーリングリストのス"
"レッド<ulink url=\"http://archives.postgresql.org/pgsql-performance/2005-02/"
"msg00030.php\">http://archives.postgresql.org/pgsql-performance/2005-02/"
"msg00030.php</ulink>をご覧下さい。"

#. Tag: para
#: performance_tips.xml:41
#, no-c-format
msgid ""
"and newer thread on PostGIS <ulink url=\"https://lists.osgeo.org/pipermail/"
"postgis-devel/2017-June/026209.html\">https://lists.osgeo.org/pipermail/"
"postgis-devel/2017-June/026209.html</ulink>"
msgstr ""
"また、PostGISの新しいスレッド<ulink url=\"https://lists.osgeo.org/pipermail/"
"postgis-devel/2017-June/026209.html\">https://lists.osgeo.org/pipermail/"
"postgis-devel/2017-June/026209.html</ulink>もご覧下さい。"

#. Tag: title
#: performance_tips.xml:45
#, no-c-format
msgid "Workarounds"
msgstr "応急処置"

#. Tag: para
#: performance_tips.xml:47
#, no-c-format
msgid ""
"The PostgreSQL people are trying to solve this issue by making the query "
"estimation TOAST-aware. For now, here are two workarounds:"
msgstr ""
"PostgreSQLコミュニティでは、TOASTを意識したクエリ見積もりを作ることで、この問"
"題を解決しようとしています。今のところは、二つの応急処置があります。"

#. Tag: para
#: performance_tips.xml:50
#, no-c-format
msgid ""
"The first workaround is to force the query planner to use the index. Send "
"\"SET enable_seqscan TO off;\" to the server before issuing the query. This "
"basically forces the query planner to avoid sequential scans whenever "
"possible. So it uses the GIST index as usual. But this flag has to be set on "
"every connection, and it causes the query planner to make misestimations in "
"other cases, so you should \"SET enable_seqscan TO on;\" after the query."
msgstr ""
"一つは、クエリプランナにインデックスの使用を強制することです。クエリを発行す"
"る前に\"SET enable_seqscan TO off;\"をサーバに送信します。これは基本的にクエ"
"リプランナに対して可能な限り順に走査することを避けるよう強制します。そのため"
"GiSTインデックスを通常使うようになります。しかし、このフラグは接続するたびに"
"設定しなければならず、他のケースにおいてはクエリプランナに誤った見積もりをさ"
"せることになるので、 \"SET enable_seqscan TO on;\"をクエリの後に送信すべきで"
"す。"

#. Tag: para
#: performance_tips.xml:58
#, no-c-format
msgid ""
"The second workaround is to make the sequential scan as fast as the query "
"planner thinks. This can be achieved by creating an additional column that "
"\"caches\" the bbox, and matching against this. In our example, the commands "
"are like:"
msgstr ""
"もう一つは、順に走査することをクエリプランナが考える程度に早くすることです。"
"これは、バウンダリボックスの「キャッシュ」を行う追加カラムを作成し、このカラ"
"ムにマッチさせるようにすることで達成することができます。ここでの例では次のよ"
"うになります。"

#. Tag: para
#: performance_tips.xml:65
#, no-c-format
msgid ""
"Now change your query to use the &amp;&amp; operator against bbox instead of "
"geom_column, like:"
msgstr ""
"そして、次のように、&amp;&amp;演算子をgeom_columnに対して行っていたものをbbox"
"に変更します。"

#. Tag: para
#: performance_tips.xml:70
#, no-c-format
msgid ""
"Of course, if you change or add rows to mytable, you have to keep the bbox "
"\"in sync\". The most transparent way to do this would be triggers, but you "
"also can modify your application to keep the bbox column current or run the "
"UPDATE query above after every modification."
msgstr ""
"もちろん、mytableの行を変更または追加したら、bboxを「同期」するようにしなけれ"
"ばなりません。最もすっきりした方法はトリガです。もしくは、アプリケーションを"
"変更してbboxカラムの現状を保持するか、テーブル更新後にいつもUPDATEクエリを実"
"行するかでも対応できます。"

#. Tag: title
#: performance_tips.xml:79
#, no-c-format
msgid "CLUSTERing on geometry indices"
msgstr "ジオメトリインデックスでCLUSTERを実行する"

#. Tag: para
#: performance_tips.xml:81
#, no-c-format
msgid ""
"For tables that are mostly read-only, and where a single index is used for "
"the majority of queries, PostgreSQL offers the CLUSTER command. This command "
"physically reorders all the data rows in the same order as the index "
"criteria, yielding two performance advantages: First, for index range scans, "
"the number of seeks on the data table is drastically reduced. Second, if "
"your working set concentrates to some small intervals on the indices, you "
"have a more efficient caching because the data rows are spread along fewer "
"data pages. (Feel invited to read the CLUSTER command documentation from the "
"PostgreSQL manual at this point.)"
msgstr ""
"読み込むことがほとんどで、かつほとんどのクエリでひとつのインデックスを使うよ"
"うなテーブルのために、PostgreSQLはCLUSTERコマンドを提供しています。このコマン"
"ドは、全てのデータ行を、インデックス基準にあわせて物理的に再整理するので、二"
"つの性能の利点を生みます。一つは、インデックスの範囲走査のために、データテー"
"ブルのシーク回数が劇的に減少することです。もう一つは、いくつかの小さなイン"
"デックス間隔に集中する場合には、データ行が分布するデータページがより少なくな"
"ることで、より効率的なキャッシュを持つことです (この点は、PostgreSQLマニュア"
"ルのCLUSTERコマンドのドキュメントを読むように仕向けられていると感じて下さ"
"い)。"

#. Tag: para
#: performance_tips.xml:91
#, no-c-format
msgid ""
"However, currently PostgreSQL does not allow clustering on PostGIS GIST "
"indices because GIST indices simply ignores NULL values, you get an error "
"message like:"
msgstr ""
"しかし、GiSTインデックスは単純にNULL値を無視するため現在のところPostGISのGiST"
"インデックスのクラスタリングはできず、次のようなエラーメッセージを得ます。"

#. Tag: para
#: performance_tips.xml:97
#, no-c-format
msgid ""
"As the HINT message tells you, one can work around this deficiency by adding "
"a \"not null\" constraint to the table:"
msgstr ""
"ヒントメッセージにある通り、テーブルに\"not null\"制限を追加することで、この"
"欠陥にとりあえず対応できます。例を示します。"

#. Tag: para
#: performance_tips.xml:102
#, no-c-format
msgid ""
"Of course, this will not work if you in fact need NULL values in your "
"geometry column. Additionally, you must use the above method to add the "
"constraint, using a CHECK constraint like \"ALTER TABLE blubb ADD CHECK "
"(geometry is not null);\" will not work."
msgstr ""
"もちろん、ジオメトリカラムで実際にNULL値が必要な場合、この対応はできません。"
"さらには、制限を追加するには上の方法を使わなければならず、\"ALTER TABLE "
"blubb ADD CHECK (geometry is not null);\"のようなCHECK制限は使えません。"

#. Tag: title
#: performance_tips.xml:109
#, no-c-format
msgid "Avoiding dimension conversion"
msgstr "次元変換の回避"

#. Tag: para
#: performance_tips.xml:111
#, no-c-format
msgid ""
"Sometimes, you happen to have 3D or 4D data in your table, but always access "
"it using OpenGIS compliant ST_AsText() or ST_AsBinary() functions that only "
"output 2D geometries. They do this by internally calling the ST_Force2D() "
"function, which introduces a significant overhead for large geometries. To "
"avoid this overhead, it may be feasible to pre-drop those additional "
"dimensions once and forever:"
msgstr ""
"ときどき、テーブルで3次元、4次元のデータを持つのに、常にOpenGIS準拠の"
"ST_AsText()またはST_AsBinary()関数を使ってアクセスして 2次元ジオメトリを出力"
"させるようなことが起きます。内部でST_Force_2d()関数を呼んでいるために発生しま"
"すが、これは、大きなジオメトリでは重大なオーバヘッドを誘引することになりま"
"す。このオーバヘッドを回避するには、一度追加された次元を前もって落とし、かつ"
"これを永続化するのが適当かも知れません。"

#. Tag: para
#: performance_tips.xml:120
#, no-c-format
msgid ""
"Note that if you added your geometry column using AddGeometryColumn() "
"there'll be a constraint on geometry dimension. To bypass it you will need "
"to drop the constraint. Remember to update the entry in the geometry_columns "
"table and recreate the constraint afterwards."
msgstr ""
"AddGeometryColumn()を使ってジオメトリカラムを追加した場合、ジオメトリの次元に"
"関する制限があることに注意してください。この制限を迂回するには、制限の削除が"
"必要になります。geometry_columnsテーブル内のエントリを更新して、その後で制限"
"を再作成することを忘れないで下さい。"

#. Tag: para
#: performance_tips.xml:126
#, no-c-format
msgid ""
"In case of large tables, it may be wise to divide this UPDATE into smaller "
"portions by constraining the UPDATE to a part of the table via a WHERE "
"clause and your primary key or another feasible criteria, and running a "
"simple \"VACUUM;\" between your UPDATEs. This drastically reduces the need "
"for temporary disk space. Additionally, if you have mixed dimension "
"geometries, restricting the UPDATE by \"WHERE dimension(geom)&gt;2\" skips "
"re-writing of geometries that already are in 2D."
msgstr ""
"大きなテーブルの場合、WHERE節、およびプライマリキー若しくは他の適切な基準に"
"よってテーブルの一部へのUPDATEを制限させて、UPDATEの実行の間に単に\"VACUUM;"
"\"と実行することで、UPDATEをより小さい塊に分割するのが賢いやり方かもしれませ"
"ん。これにより、テンポラリディスクスペースが劇的に減少します。さらに、次元混"
"合のジオメトリを持つ場合、\"WHERE dimension(the_geom)&gt;2\"によってUPDATEを"
"制限することで、2次元で書かれているジオメトリの再書き込みをスキップさせること"
"ができます。"
